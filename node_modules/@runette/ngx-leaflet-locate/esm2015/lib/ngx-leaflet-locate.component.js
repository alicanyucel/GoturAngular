/// <reference path="../../node_modules/@types/leaflet.locatecontrol/index.d.ts" />
/// <reference path="../../node_modules/@types/leaflet.locatecontrol/index.d.ts" />
import { Component, Input, Output, EventEmitter } from '@angular/core';
import { control, Control } from 'leaflet';
import '../../../../node_modules/leaflet.locatecontrol/dist/L.Control.Locate.min.js';
import * as i0 from "@angular/core";
export class NgxLeafletLocateComponent {
    constructor() {
        this.location$ = new EventEmitter;
        this.control = new Control.Locate();
        this.options = {};
    }
    ;
    ngOnInit() {
    }
    ;
    ngOnDestroy() {
        var _a, _b, _c;
        if (this.control && this.map) {
            this.control.stop();
            (_a = this._map) === null || _a === void 0 ? void 0 : _a.off("unload", (_b = this.map) === null || _b === void 0 ? void 0 : _b._unload, this.control);
        }
        if (this._map && this.control)
            this._map.removeControl(this.control);
        (_c = this._map) === null || _c === void 0 ? void 0 : _c.off('locationfound');
    }
    ;
    set map(map) {
        if (map) {
            this._map = map;
            this.control = control.locate(this.options);
            this.control.addTo(map);
            let location$ = this.location$;
            map.on('locationfound', e => {
                location$.emit(e);
            });
        }
    }
    get map() {
        return this._map;
    }
}
NgxLeafletLocateComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: NgxLeafletLocateComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
NgxLeafletLocateComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: NgxLeafletLocateComponent, selector: "leaflet-locate-control", inputs: { options: "options", map: "map" }, outputs: { location$: "location$" }, ngImport: i0, template: '', isInline: true });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: NgxLeafletLocateComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'leaflet-locate-control',
                    template: '',
                    styleUrls: []
                }]
        }], ctorParameters: function () { return []; }, propDecorators: { location$: [{
                type: Output
            }], options: [{
                type: Input
            }], map: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LWxlYWZsZXQtbG9jYXRlLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9saWIvbmd4LWxlYWZsZXQtbG9jYXRlLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxtRkFBbUY7QUFBbkYsbUZBQW1GO0FBQ25GLE9BQU8sRUFBRSxTQUFTLEVBQXFCLEtBQUssRUFBRSxNQUFNLEVBQUUsWUFBWSxFQUFDLE1BQU0sZUFBZSxDQUFDO0FBQ3pGLE9BQU8sRUFBTSxPQUFPLEVBQUUsT0FBTyxFQUFnQixNQUFNLFNBQVMsQ0FBQztBQUM3RCxPQUFPLDZFQUE2RSxDQUFDOztBQVdyRixNQUFNLE9BQU8seUJBQXlCO0lBS3BDO1FBSFUsY0FBUyxHQUFnQyxJQUFJLFlBQVksQ0FBQztRQUM3RCxZQUFPLEdBQW1CLElBQUksT0FBTyxDQUFDLE1BQU0sRUFBRSxDQUFDO1FBaUI3QyxZQUFPLEdBQXlCLEVBQUUsQ0FBQztJQWQ1QyxDQUFDO0lBQUEsQ0FBQztJQUVGLFFBQVE7SUFDUixDQUFDO0lBQUEsQ0FBQztJQUVGLFdBQVc7O1FBQ1QsSUFBSSxJQUFJLENBQUMsT0FBTyxJQUFJLElBQUksQ0FBQyxHQUFHLEVBQUU7WUFDNUIsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLEVBQUUsQ0FBQztZQUNwQixNQUFBLElBQUksQ0FBQyxJQUFJLDBDQUFFLEdBQUcsQ0FBQyxRQUFRLEVBQUUsTUFBQyxJQUFJLENBQUMsR0FBaUIsMENBQUUsT0FBTyxFQUFFLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztTQUMxRTtRQUNELElBQUksSUFBSSxDQUFDLElBQUksSUFBSSxJQUFJLENBQUMsT0FBTztZQUFFLElBQUksQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUNyRSxNQUFBLElBQUksQ0FBQyxJQUFJLDBDQUFFLEdBQUcsQ0FBQyxlQUFlLENBQUMsQ0FBQTtJQUNqQyxDQUFDO0lBQUEsQ0FBQztJQUlGLElBQWEsR0FBRyxDQUFDLEdBQW9CO1FBQ25DLElBQUksR0FBRyxFQUFFO1lBQ1AsSUFBSSxDQUFDLElBQUksR0FBRyxHQUFHLENBQUM7WUFDaEIsSUFBSSxDQUFDLE9BQU8sR0FBSSxPQUFPLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztZQUM3QyxJQUFJLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQztZQUN4QixJQUFJLFNBQVMsR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDO1lBQy9CLEdBQUcsQ0FBQyxFQUFFLENBQUMsZUFBZSxFQUFFLENBQUMsQ0FBQyxFQUFFO2dCQUMxQixTQUFTLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ3BCLENBQUMsQ0FBQyxDQUFDO1NBQ0o7SUFDSCxDQUFDO0lBRUQsSUFBSSxHQUFHO1FBQ0wsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFBO0lBQ2xCLENBQUM7O3VIQXBDVSx5QkFBeUI7MkdBQXpCLHlCQUF5QiwrSUFIMUIsRUFBRTs0RkFHRCx5QkFBeUI7a0JBTHJDLFNBQVM7bUJBQUM7b0JBQ1QsUUFBUSxFQUFFLHdCQUF3QjtvQkFDbEMsUUFBUSxFQUFFLEVBQUU7b0JBQ1osU0FBUyxFQUFFLEVBQUU7aUJBQ2Q7MEVBR1csU0FBUztzQkFBbEIsTUFBTTtnQkFrQkUsT0FBTztzQkFBZixLQUFLO2dCQUVPLEdBQUc7c0JBQWYsS0FBSyIsInNvdXJjZXNDb250ZW50IjpbIi8vLyA8cmVmZXJlbmNlIHBhdGg9XCIuLi8uLi9ub2RlX21vZHVsZXMvQHR5cGVzL2xlYWZsZXQubG9jYXRlY29udHJvbC9pbmRleC5kLnRzXCIgLz5cbmltcG9ydCB7IENvbXBvbmVudCwgT25Jbml0LCBPbkRlc3Ryb3ksIElucHV0LCBPdXRwdXQsIEV2ZW50RW1pdHRlcn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge01hcCwgY29udHJvbCwgQ29udHJvbCwgTG9jYXRpb25FdmVudH0gZnJvbSAnbGVhZmxldCc7XG5pbXBvcnQgJy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9sZWFmbGV0LmxvY2F0ZWNvbnRyb2wvZGlzdC9MLkNvbnRyb2wuTG9jYXRlLm1pbi5qcyc7XG5cbmludGVyZmFjZSBjdXN0b21NYXAgZXh0ZW5kcyBNYXAge1xuICBfdW5sb2FkOiBhbnk7XG59XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ2xlYWZsZXQtbG9jYXRlLWNvbnRyb2wnLFxuICB0ZW1wbGF0ZTogJycsXG4gIHN0eWxlVXJsczogW11cbn0pXG5leHBvcnQgY2xhc3MgTmd4TGVhZmxldExvY2F0ZUNvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCwgT25EZXN0cm95IHtcbiAgcHJpdmF0ZSBfbWFwPzogTWFwO1xuICBAT3V0cHV0KCkgbG9jYXRpb24kOiBFdmVudEVtaXR0ZXI8TG9jYXRpb25FdmVudD4gPSBuZXcgRXZlbnRFbWl0dGVyO1xuICBwdWJsaWMgY29udHJvbDogQ29udHJvbC5Mb2NhdGUgPSBuZXcgQ29udHJvbC5Mb2NhdGUoKTtcblxuICBjb25zdHJ1Y3RvcigpIHsgXG4gIH07XG5cbiAgbmdPbkluaXQoKSB7XG4gIH07XG5cbiAgbmdPbkRlc3Ryb3koKSB7XG4gICAgaWYgKHRoaXMuY29udHJvbCAmJiB0aGlzLm1hcCkge1xuICAgICAgdGhpcy5jb250cm9sLnN0b3AoKTtcbiAgICAgIHRoaXMuX21hcD8ub2ZmKFwidW5sb2FkXCIsICh0aGlzLm1hcCBhcyBjdXN0b21NYXApPy5fdW5sb2FkLCB0aGlzLmNvbnRyb2wpO1xuICAgIH1cbiAgICBpZiAodGhpcy5fbWFwICYmIHRoaXMuY29udHJvbCkgdGhpcy5fbWFwLnJlbW92ZUNvbnRyb2wodGhpcy5jb250cm9sKTtcbiAgICB0aGlzLl9tYXA/Lm9mZignbG9jYXRpb25mb3VuZCcpXG4gIH07XG5cbiAgQElucHV0KCkgb3B0aW9uczogQ29udHJvbC5Mb2NhdGVPcHRpb25zPSB7fTtcblxuICBASW5wdXQoKSBzZXQgbWFwKG1hcDogTWFwIHwgdW5kZWZpbmVkKXtcbiAgICBpZiAobWFwKSB7XG4gICAgICB0aGlzLl9tYXAgPSBtYXA7XG4gICAgICB0aGlzLmNvbnRyb2wgPSAgY29udHJvbC5sb2NhdGUodGhpcy5vcHRpb25zKTtcbiAgICAgIHRoaXMuY29udHJvbC5hZGRUbyhtYXApO1xuICAgICAgbGV0IGxvY2F0aW9uJCA9IHRoaXMubG9jYXRpb24kO1xuICAgICAgbWFwLm9uKCdsb2NhdGlvbmZvdW5kJywgZSA9PiB7XG4gICAgICAgIGxvY2F0aW9uJC5lbWl0KGUpO1xuICAgICAgfSk7XG4gICAgfVxuICB9XG4gIFxuICBnZXQgbWFwKCk6IE1hcCB8IHVuZGVmaW5lZCB7XG4gICAgcmV0dXJuIHRoaXMuX21hcFxuICB9XG59XG4iXX0=