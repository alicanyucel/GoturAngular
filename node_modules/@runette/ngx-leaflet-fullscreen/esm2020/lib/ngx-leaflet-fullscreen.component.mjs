/// <reference types='@runette/leaflet-fullscreen'/>
/// <reference types='@runette/leaflet-fullscreen'/>
import { Component, Input } from '@angular/core';
import { Control } from 'leaflet';
import '../../../../node_modules/@runette/leaflet-fullscreen/dist/Leaflet.fullscreen.min.js';
import * as i0 from "@angular/core";
export class FullscreenControlComponent {
    constructor() {
        this._options = {};
    }
    set options(opt) {
        this._options = opt;
        this.control = new Control.Fullscreen(this._options);
        if (this._map) {
            this._map?.addControl(this.control);
            this._map?.on('enterFullscreen', () => this._map?.invalidateSize());
            this._map?.on('exitFullscreen', () => this._map?.invalidateSize());
        }
    }
    ngOnInit() {
    }
    ngOnDestroy() {
        if (this.control) {
            this._map?.removeControl(this.control);
            this._map?.off('enterFullscreen');
            this._map?.off('exitFullscreen');
        }
    }
    set map(map) {
        if (map) {
            this._map = map;
            if (this.control) {
                map.addControl(this.control);
                map.on('enterFullscreen', () => map.invalidateSize());
                map.on('exitFullscreen', () => map.invalidateSize());
            }
        }
        ;
    }
    ;
    get map() {
        return this._map;
    }
    ;
}
FullscreenControlComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.3.0", ngImport: i0, type: FullscreenControlComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
FullscreenControlComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "14.3.0", type: FullscreenControlComponent, selector: "leaflet-fullscreen-control", inputs: { options: "options", map: "map" }, ngImport: i0, template: '', isInline: true });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.3.0", ngImport: i0, type: FullscreenControlComponent, decorators: [{
            type: Component,
            args: [{ selector: 'leaflet-fullscreen-control', template: '' }]
        }], ctorParameters: function () { return []; }, propDecorators: { options: [{
                type: Input
            }], map: [{
                type: Input
            }] } });
;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LWxlYWZsZXQtZnVsbHNjcmVlbi5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvbGliL25neC1sZWFmbGV0LWZ1bGxzY3JlZW4uY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9EQUFvRDtBQUFwRCxvREFBb0Q7QUFDcEQsT0FBTyxFQUFFLFNBQVMsRUFBcUIsS0FBSyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3BFLE9BQU8sRUFBTSxPQUFPLEVBQW9CLE1BQU0sU0FBUyxDQUFDO0FBQ3hELE9BQU8scUZBQXFGLENBQUM7O0FBTzdGLE1BQU0sT0FBTywwQkFBMEI7SUFnQnJDO1FBZlEsYUFBUSxHQUFzQixFQUFFLENBQUM7SUFlekIsQ0FBQztJQWJqQixJQUFhLE9BQU8sQ0FBQyxHQUFzQjtRQUN6QyxJQUFJLENBQUMsUUFBUSxHQUFHLEdBQUcsQ0FBQztRQUNwQixJQUFJLENBQUMsT0FBTyxHQUFHLElBQUksT0FBTyxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUE7UUFDcEQsSUFBSSxJQUFJLENBQUMsSUFBSSxFQUFFO1lBQ1gsSUFBSSxDQUFDLElBQUksRUFBRSxVQUFVLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1lBQ3BDLElBQUksQ0FBQyxJQUFJLEVBQUUsRUFBRSxDQUFDLGlCQUFpQixFQUFFLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsY0FBYyxFQUFFLENBQUMsQ0FBQztZQUNwRSxJQUFJLENBQUMsSUFBSSxFQUFFLEVBQUUsQ0FBQyxnQkFBZ0IsRUFBRSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLGNBQWMsRUFBRSxDQUFDLENBQUM7U0FDdEU7SUFDSCxDQUFDO0lBT0QsUUFBUTtJQUNSLENBQUM7SUFFRCxXQUFXO1FBQ1QsSUFBSSxJQUFJLENBQUMsT0FBTyxFQUFFO1lBQ2hCLElBQUksQ0FBQyxJQUFJLEVBQUUsYUFBYSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztZQUN2QyxJQUFJLENBQUMsSUFBSSxFQUFFLEdBQUcsQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO1lBQ2xDLElBQUksQ0FBQyxJQUFJLEVBQUUsR0FBRyxDQUFDLGdCQUFnQixDQUFDLENBQUE7U0FDakM7SUFDSCxDQUFDO0lBRUQsSUFBYSxHQUFHLENBQUMsR0FBb0I7UUFDbkMsSUFBSSxHQUFHLEVBQUU7WUFDUCxJQUFJLENBQUMsSUFBSSxHQUFHLEdBQUcsQ0FBQztZQUNoQixJQUFJLElBQUksQ0FBQyxPQUFPLEVBQ2hCO2dCQUNFLEdBQUcsQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFBO2dCQUM1QixHQUFHLENBQUMsRUFBRSxDQUFDLGlCQUFpQixFQUFFLEdBQUcsRUFBRSxDQUFDLEdBQUcsQ0FBQyxjQUFjLEVBQUUsQ0FBQyxDQUFDO2dCQUN0RCxHQUFHLENBQUMsRUFBRSxDQUFDLGdCQUFnQixFQUFFLEdBQUcsRUFBRSxDQUFDLEdBQUcsQ0FBQyxjQUFjLEVBQUUsQ0FBQyxDQUFDO2FBQ3REO1NBQ0Y7UUFBQSxDQUFDO0lBQ0osQ0FBQztJQUFBLENBQUM7SUFDRixJQUFJLEdBQUc7UUFDTCxPQUFPLElBQUksQ0FBQyxJQUFJLENBQUE7SUFDbEIsQ0FBQztJQUFBLENBQUM7O3VIQTFDUywwQkFBMEI7MkdBQTFCLDBCQUEwQiw4R0FIM0IsRUFBRTsyRkFHRCwwQkFBMEI7a0JBTHRDLFNBQVM7K0JBQ0UsNEJBQTRCLFlBQzVCLEVBQUU7MEVBTUMsT0FBTztzQkFBbkIsS0FBSztnQkEwQk8sR0FBRztzQkFBZixLQUFLOztBQWNQLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLy8gPHJlZmVyZW5jZSB0eXBlcz0nQHJ1bmV0dGUvbGVhZmxldC1mdWxsc2NyZWVuJy8+XG5pbXBvcnQgeyBDb21wb25lbnQsIE9uSW5pdCwgT25EZXN0cm95LCBJbnB1dCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtNYXAsIENvbnRyb2wsIEZ1bGxzY3JlZW5PcHRpb25zfSBmcm9tICdsZWFmbGV0JztcbmltcG9ydCAnLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL0BydW5ldHRlL2xlYWZsZXQtZnVsbHNjcmVlbi9kaXN0L0xlYWZsZXQuZnVsbHNjcmVlbi5taW4uanMnO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdsZWFmbGV0LWZ1bGxzY3JlZW4tY29udHJvbCcsXG4gIHRlbXBsYXRlOiAnJyxcbiAgc3R5bGVVcmxzOiBbXVxufSlcbmV4cG9ydCBjbGFzcyBGdWxsc2NyZWVuQ29udHJvbENvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCwgT25EZXN0cm95IHtcbiAgcHJpdmF0ZSBfb3B0aW9uczogRnVsbHNjcmVlbk9wdGlvbnMgPSB7fTtcblxuICBASW5wdXQoKSBzZXQgb3B0aW9ucyhvcHQ6IEZ1bGxzY3JlZW5PcHRpb25zKSB7XG4gICAgdGhpcy5fb3B0aW9ucyA9IG9wdDtcbiAgICB0aGlzLmNvbnRyb2wgPSBuZXcgQ29udHJvbC5GdWxsc2NyZWVuKHRoaXMuX29wdGlvbnMpXG4gICAgaWYgKHRoaXMuX21hcCkge1xuICAgICAgICB0aGlzLl9tYXA/LmFkZENvbnRyb2wodGhpcy5jb250cm9sKTtcbiAgICAgICAgdGhpcy5fbWFwPy5vbignZW50ZXJGdWxsc2NyZWVuJywgKCkgPT4gdGhpcy5fbWFwPy5pbnZhbGlkYXRlU2l6ZSgpKTtcbiAgICAgICAgdGhpcy5fbWFwPy5vbignZXhpdEZ1bGxzY3JlZW4nLCAoKSA9PiB0aGlzLl9tYXA/LmludmFsaWRhdGVTaXplKCkpO1xuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgX21hcD86IE1hcDtcbiAgcHVibGljIGNvbnRyb2w/OiBDb250cm9sLkZ1bGxzY3JlZW47XG5cbiAgY29uc3RydWN0b3IoKSB7IH1cblxuICBuZ09uSW5pdCgpIHtcbiAgfVxuXG4gIG5nT25EZXN0cm95KCkge1xuICAgIGlmICh0aGlzLmNvbnRyb2wpIHtcbiAgICAgIHRoaXMuX21hcD8ucmVtb3ZlQ29udHJvbCh0aGlzLmNvbnRyb2wpO1xuICAgICAgdGhpcy5fbWFwPy5vZmYoJ2VudGVyRnVsbHNjcmVlbicpO1xuICAgICAgdGhpcy5fbWFwPy5vZmYoJ2V4aXRGdWxsc2NyZWVuJylcbiAgICB9XG4gIH1cblxuICBASW5wdXQoKSBzZXQgbWFwKG1hcDogTWFwIHwgdW5kZWZpbmVkKXtcbiAgICBpZiAobWFwKSB7IFxuICAgICAgdGhpcy5fbWFwID0gbWFwO1xuICAgICAgaWYgKHRoaXMuY29udHJvbClcbiAgICAgIHtcbiAgICAgICAgbWFwLmFkZENvbnRyb2wodGhpcy5jb250cm9sKVxuICAgICAgICBtYXAub24oJ2VudGVyRnVsbHNjcmVlbicsICgpID0+IG1hcC5pbnZhbGlkYXRlU2l6ZSgpKTtcbiAgICAgICAgbWFwLm9uKCdleGl0RnVsbHNjcmVlbicsICgpID0+IG1hcC5pbnZhbGlkYXRlU2l6ZSgpKTtcbiAgICAgIH1cbiAgICB9O1xuICB9O1xuICBnZXQgbWFwKCk6IE1hcCB8IHVuZGVmaW5lZCB7XG4gICAgcmV0dXJuIHRoaXMuX21hcFxuICB9O1xufTtcbiJdfQ==