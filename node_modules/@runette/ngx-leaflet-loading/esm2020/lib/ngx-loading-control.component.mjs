/// <reference types='leaflet-loading' />
/// <reference types='leaflet-loading' />
import { Component, Input } from '@angular/core';
import { Control } from 'leaflet';
import '../../../../node_modules/leaflet-loading/src/Control.Loading.js';
import * as i0 from "@angular/core";
export class NgxLoadingControlComponent {
    constructor() {
        this.loading = new Control();
        this.options = {};
    }
    ngOnInit() {
    }
    ngOnDestroy() {
        this._map?.removeControl(this.loading);
    }
    set map(map) {
        if (map) {
            this._map = map;
            this.loading = new Control.Loading(this.options);
            this.loading.addTo(map);
        }
    }
    get map() {
        return this._map;
    }
}
NgxLoadingControlComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.8", ngImport: i0, type: NgxLoadingControlComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
NgxLoadingControlComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.8", type: NgxLoadingControlComponent, selector: "leaflet-loading-control", inputs: { options: "options", map: "map" }, ngImport: i0, template: '', isInline: true });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.8", ngImport: i0, type: NgxLoadingControlComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'leaflet-loading-control',
                    template: '',
                }]
        }], ctorParameters: function () { return []; }, propDecorators: { options: [{
                type: Input
            }], map: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LWxvYWRpbmctY29udHJvbC5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvbGliL25neC1sb2FkaW5nLWNvbnRyb2wuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLHlDQUF5QztBQUF6Qyx5Q0FBeUM7QUFDekMsT0FBTyxFQUFFLFNBQVMsRUFBcUIsS0FBSyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3BFLE9BQU8sRUFBTSxPQUFPLEVBQUMsTUFBTSxTQUFTLENBQUM7QUFDckMsT0FBTyxpRUFBaUUsQ0FBQTs7QUFNeEUsTUFBTSxPQUFPLDBCQUEwQjtJQUtyQztRQUZRLFlBQU8sR0FBb0IsSUFBSSxPQUFPLEVBQUUsQ0FBQztRQVd4QyxZQUFPLEdBQXdCLEVBQUUsQ0FBQztJQVQzQixDQUFDO0lBRWpCLFFBQVE7SUFDUixDQUFDO0lBRUQsV0FBVztRQUNULElBQUksQ0FBQyxJQUFJLEVBQUUsYUFBYSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUN6QyxDQUFDO0lBSUQsSUFBYSxHQUFHLENBQUMsR0FBb0I7UUFDbkMsSUFBSSxHQUFHLEVBQUU7WUFDUCxJQUFJLENBQUMsSUFBSSxHQUFHLEdBQUcsQ0FBQztZQUNoQixJQUFJLENBQUMsT0FBTyxHQUFHLElBQUksT0FBTyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7WUFDakQsSUFBSSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUM7U0FDekI7SUFDSCxDQUFDO0lBQ0QsSUFBSSxHQUFHO1FBQ0wsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFBO0lBQ2xCLENBQUM7O3VIQXpCVSwwQkFBMEI7MkdBQTFCLDBCQUEwQiwyR0FGM0IsRUFBRTsyRkFFRCwwQkFBMEI7a0JBSnRDLFNBQVM7bUJBQUM7b0JBQ1QsUUFBUSxFQUFFLHlCQUF5QjtvQkFDbkMsUUFBUSxFQUFFLEVBQUU7aUJBQ2I7MEVBZVUsT0FBTztzQkFBZixLQUFLO2dCQUVPLEdBQUc7c0JBQWYsS0FBSyIsInNvdXJjZXNDb250ZW50IjpbIi8vLyA8cmVmZXJlbmNlIHR5cGVzPSdsZWFmbGV0LWxvYWRpbmcnIC8+XG5pbXBvcnQgeyBDb21wb25lbnQsIE9uSW5pdCwgT25EZXN0cm95LCBJbnB1dCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtNYXAsIENvbnRyb2x9IGZyb20gJ2xlYWZsZXQnO1xuaW1wb3J0ICcuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvbGVhZmxldC1sb2FkaW5nL3NyYy9Db250cm9sLkxvYWRpbmcuanMnXG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ2xlYWZsZXQtbG9hZGluZy1jb250cm9sJyxcbiAgdGVtcGxhdGU6ICcnLFxufSlcbmV4cG9ydCBjbGFzcyBOZ3hMb2FkaW5nQ29udHJvbENvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCwgT25EZXN0cm95IHtcblxuICBwcml2YXRlIF9tYXA/OiBNYXA7XG4gIHByaXZhdGUgbG9hZGluZzogQ29udHJvbC5Mb2FkaW5nID0gbmV3IENvbnRyb2woKTtcblxuICBjb25zdHJ1Y3RvcigpIHsgfVxuXG4gIG5nT25Jbml0KCkge1xuICB9XG5cbiAgbmdPbkRlc3Ryb3koKSB7XG4gICAgdGhpcy5fbWFwPy5yZW1vdmVDb250cm9sKHRoaXMubG9hZGluZyk7XG4gIH1cblxuICBASW5wdXQoKSBvcHRpb25zOiB7W25hbWU6c3RyaW5nXTphbnl9ID0ge307XG5cbiAgQElucHV0KCkgc2V0IG1hcChtYXA6IE1hcCB8IHVuZGVmaW5lZCl7XG4gICAgaWYgKG1hcCkge1xuICAgICAgdGhpcy5fbWFwID0gbWFwO1xuICAgICAgdGhpcy5sb2FkaW5nID0gbmV3IENvbnRyb2wuTG9hZGluZyh0aGlzLm9wdGlvbnMpO1xuICAgICAgdGhpcy5sb2FkaW5nLmFkZFRvKG1hcCk7XG4gICAgfVxuICB9XG4gIGdldCBtYXAoKTogTWFwIHwgdW5kZWZpbmVkIHtcbiAgICByZXR1cm4gdGhpcy5fbWFwXG4gIH1cbn1cbiJdfQ==