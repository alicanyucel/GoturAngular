import { Directive, EventEmitter, Input, Output } from '@angular/core';
import { LeafletDirectiveWrapper } from '../core/leaflet.directive.wrapper';
import { LeafletUtil } from '../core/leaflet.util';
import * as i0 from "@angular/core";
import * as i1 from "../core/leaflet.directive";
/**
 * Layer directive
 *
 * This directive is used to directly control a single map layer. The purpose of this directive is to
 * be used as part of a child structural directive of the map element.
 *
 */
class LeafletLayerDirective {
    constructor(leafletDirective, zone) {
        this.zone = zone;
        // Layer Events
        this.onAdd = new EventEmitter();
        this.onRemove = new EventEmitter();
        this.leafletDirective = new LeafletDirectiveWrapper(leafletDirective);
    }
    ngOnInit() {
        // Init the map
        this.leafletDirective.init();
    }
    ngOnDestroy() {
        if (null != this.layer) {
            // Unregister the event handlers
            this.removeLayerEventListeners(this.layer);
            // Remove the layer from the map
            this.layer.remove();
        }
    }
    ngOnChanges(changes) {
        if (changes['layer']) {
            // Update the layer
            const p = changes['layer'].previousValue;
            const n = changes['layer'].currentValue;
            this.zone.runOutsideAngular(() => {
                if (null != p) {
                    this.removeLayerEventListeners(p);
                    p.remove();
                }
                if (null != n) {
                    this.addLayerEventListeners(n);
                    this.leafletDirective.getMap().addLayer(n);
                }
            });
        }
    }
    addLayerEventListeners(l) {
        this.onAddLayerHandler = (e) => LeafletUtil.handleEvent(this.zone, this.onAdd, e);
        l.on('add', this.onAddLayerHandler);
        this.onRemoveLayerHandler = (e) => LeafletUtil.handleEvent(this.zone, this.onRemove, e);
        l.on('remove', this.onRemoveLayerHandler);
    }
    removeLayerEventListeners(l) {
        l.off('add', this.onAddLayerHandler);
        l.off('remove', this.onRemoveLayerHandler);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.0.1", ngImport: i0, type: LeafletLayerDirective, deps: [{ token: i1.LeafletDirective }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "16.0.1", type: LeafletLayerDirective, selector: "[leafletLayer]", inputs: { layer: ["leafletLayer", "layer"] }, outputs: { onAdd: "leafletLayerAdd", onRemove: "leafletLayerRemove" }, usesOnChanges: true, ngImport: i0 }); }
}
export { LeafletLayerDirective };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.0.1", ngImport: i0, type: LeafletLayerDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[leafletLayer]'
                }]
        }], ctorParameters: function () { return [{ type: i1.LeafletDirective }, { type: i0.NgZone }]; }, propDecorators: { layer: [{
                type: Input,
                args: ['leafletLayer']
            }], onAdd: [{
                type: Output,
                args: ['leafletLayerAdd']
            }], onRemove: [{
                type: Output,
                args: ['leafletLayerRemove']
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGVhZmxldC1sYXllci5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9uZ3gtbGVhZmxldC9zcmMvbGliL2xheWVycy9sZWFmbGV0LWxheWVyLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQ04sU0FBUyxFQUFFLFlBQVksRUFBRSxLQUFLLEVBQXdDLE1BQU0sRUFFNUUsTUFBTSxlQUFlLENBQUM7QUFLdkIsT0FBTyxFQUFFLHVCQUF1QixFQUFFLE1BQU0sbUNBQW1DLENBQUM7QUFDNUUsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLHNCQUFzQixDQUFDOzs7QUFHbkQ7Ozs7OztHQU1HO0FBQ0gsTUFHYSxxQkFBcUI7SUFnQmpDLFlBQVksZ0JBQWtDLEVBQVUsSUFBWTtRQUFaLFNBQUksR0FBSixJQUFJLENBQVE7UUFYcEUsZUFBZTtRQUNZLFVBQUssR0FBRyxJQUFJLFlBQVksRUFBZ0IsQ0FBQztRQUN0QyxhQUFRLEdBQUcsSUFBSSxZQUFZLEVBQWdCLENBQUM7UUFVekUsSUFBSSxDQUFDLGdCQUFnQixHQUFHLElBQUksdUJBQXVCLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztJQUN2RSxDQUFDO0lBRUQsUUFBUTtRQUVQLGVBQWU7UUFDZixJQUFJLENBQUMsZ0JBQWdCLENBQUMsSUFBSSxFQUFFLENBQUM7SUFFOUIsQ0FBQztJQUVELFdBQVc7UUFFVixJQUFJLElBQUksSUFBSSxJQUFJLENBQUMsS0FBSyxFQUFFO1lBRXZCLGdDQUFnQztZQUNoQyxJQUFJLENBQUMseUJBQXlCLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO1lBRTNDLGdDQUFnQztZQUNoQyxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sRUFBRSxDQUFDO1NBQ3BCO0lBRUYsQ0FBQztJQUVELFdBQVcsQ0FBQyxPQUF3QztRQUVuRCxJQUFJLE9BQU8sQ0FBQyxPQUFPLENBQUMsRUFBRTtZQUVyQixtQkFBbUI7WUFDbkIsTUFBTSxDQUFDLEdBQVUsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDLGFBQWEsQ0FBQztZQUNoRCxNQUFNLENBQUMsR0FBRyxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUMsWUFBWSxDQUFDO1lBRXhDLElBQUksQ0FBQyxJQUFJLENBQUMsaUJBQWlCLENBQUMsR0FBRyxFQUFFO2dCQUNoQyxJQUFJLElBQUksSUFBSSxDQUFDLEVBQUU7b0JBQ2QsSUFBSSxDQUFDLHlCQUF5QixDQUFDLENBQUMsQ0FBQyxDQUFDO29CQUNsQyxDQUFDLENBQUMsTUFBTSxFQUFFLENBQUM7aUJBQ1g7Z0JBQ0QsSUFBSSxJQUFJLElBQUksQ0FBQyxFQUFFO29CQUNkLElBQUksQ0FBQyxzQkFBc0IsQ0FBQyxDQUFDLENBQUMsQ0FBQztvQkFDL0IsSUFBSSxDQUFDLGdCQUFnQixDQUFDLE1BQU0sRUFBRSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQztpQkFDM0M7WUFDRixDQUFDLENBQUMsQ0FBQztTQUVIO0lBRUYsQ0FBQztJQUVPLHNCQUFzQixDQUFDLENBQVE7UUFFdEMsSUFBSSxDQUFDLGlCQUFpQixHQUFHLENBQUMsQ0FBZSxFQUFFLEVBQUUsQ0FBQyxXQUFXLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLEtBQUssRUFBRSxDQUFDLENBQUMsQ0FBQztRQUNoRyxDQUFDLENBQUMsRUFBRSxDQUFDLEtBQUssRUFBRSxJQUFJLENBQUMsaUJBQWlCLENBQUMsQ0FBQztRQUVwQyxJQUFJLENBQUMsb0JBQW9CLEdBQUcsQ0FBQyxDQUFlLEVBQUUsRUFBRSxDQUFDLFdBQVcsQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQyxDQUFDO1FBQ3RHLENBQUMsQ0FBQyxFQUFFLENBQUMsUUFBUSxFQUFFLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxDQUFDO0lBRTNDLENBQUM7SUFFTyx5QkFBeUIsQ0FBQyxDQUFRO1FBRXpDLENBQUMsQ0FBQyxHQUFHLENBQUMsS0FBSyxFQUFFLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO1FBQ3JDLENBQUMsQ0FBQyxHQUFHLENBQUMsUUFBUSxFQUFFLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxDQUFDO0lBRTVDLENBQUM7OEdBOUVXLHFCQUFxQjtrR0FBckIscUJBQXFCOztTQUFyQixxQkFBcUI7MkZBQXJCLHFCQUFxQjtrQkFIakMsU0FBUzttQkFBQztvQkFDVixRQUFRLEVBQUUsZ0JBQWdCO2lCQUMxQjs0SEFJdUIsS0FBSztzQkFBM0IsS0FBSzt1QkFBQyxjQUFjO2dCQUdNLEtBQUs7c0JBQS9CLE1BQU07dUJBQUMsaUJBQWlCO2dCQUNLLFFBQVE7c0JBQXJDLE1BQU07dUJBQUMsb0JBQW9CIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcblx0RGlyZWN0aXZlLCBFdmVudEVtaXR0ZXIsIElucHV0LCBOZ1pvbmUsIE9uQ2hhbmdlcywgT25EZXN0cm95LCBPbkluaXQsIE91dHB1dCxcblx0U2ltcGxlQ2hhbmdlXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5pbXBvcnQgeyBMYXllciwgTGVhZmxldEV2ZW50IH0gZnJvbSAnbGVhZmxldCc7XG5cbmltcG9ydCB7IExlYWZsZXREaXJlY3RpdmUgfSBmcm9tICcuLi9jb3JlL2xlYWZsZXQuZGlyZWN0aXZlJztcbmltcG9ydCB7IExlYWZsZXREaXJlY3RpdmVXcmFwcGVyIH0gZnJvbSAnLi4vY29yZS9sZWFmbGV0LmRpcmVjdGl2ZS53cmFwcGVyJztcbmltcG9ydCB7IExlYWZsZXRVdGlsIH0gZnJvbSAnLi4vY29yZS9sZWFmbGV0LnV0aWwnO1xuXG5cbi8qKlxuICogTGF5ZXIgZGlyZWN0aXZlXG4gKlxuICogVGhpcyBkaXJlY3RpdmUgaXMgdXNlZCB0byBkaXJlY3RseSBjb250cm9sIGEgc2luZ2xlIG1hcCBsYXllci4gVGhlIHB1cnBvc2Ugb2YgdGhpcyBkaXJlY3RpdmUgaXMgdG9cbiAqIGJlIHVzZWQgYXMgcGFydCBvZiBhIGNoaWxkIHN0cnVjdHVyYWwgZGlyZWN0aXZlIG9mIHRoZSBtYXAgZWxlbWVudC5cbiAqXG4gKi9cbkBEaXJlY3RpdmUoe1xuXHRzZWxlY3RvcjogJ1tsZWFmbGV0TGF5ZXJdJ1xufSlcbmV4cG9ydCBjbGFzcyBMZWFmbGV0TGF5ZXJEaXJlY3RpdmVcblx0aW1wbGVtZW50cyBPbkNoYW5nZXMsIE9uRGVzdHJveSwgT25Jbml0IHtcblxuXHRASW5wdXQoJ2xlYWZsZXRMYXllcicpIGxheWVyOiBMYXllcjtcblxuXHQvLyBMYXllciBFdmVudHNcblx0QE91dHB1dCgnbGVhZmxldExheWVyQWRkJykgb25BZGQgPSBuZXcgRXZlbnRFbWl0dGVyPExlYWZsZXRFdmVudD4oKTtcblx0QE91dHB1dCgnbGVhZmxldExheWVyUmVtb3ZlJykgb25SZW1vdmUgPSBuZXcgRXZlbnRFbWl0dGVyPExlYWZsZXRFdmVudD4oKTtcblxuXHQvLyBMYXllciBFdmVudCBoYW5kbGVyc1xuXHRwcml2YXRlIG9uQWRkTGF5ZXJIYW5kbGVyOiBhbnk7XG5cdHByaXZhdGUgb25SZW1vdmVMYXllckhhbmRsZXI6IGFueTtcblxuXHQvLyBXcmFwcGVyIGZvciB0aGUgbGVhZmxldCBkaXJlY3RpdmUgKG1hbmFnZXMgdGhlIHBhcmVudCBkaXJlY3RpdmUpXG5cdHByaXZhdGUgbGVhZmxldERpcmVjdGl2ZTogTGVhZmxldERpcmVjdGl2ZVdyYXBwZXI7XG5cblx0Y29uc3RydWN0b3IobGVhZmxldERpcmVjdGl2ZTogTGVhZmxldERpcmVjdGl2ZSwgcHJpdmF0ZSB6b25lOiBOZ1pvbmUpIHtcblx0XHR0aGlzLmxlYWZsZXREaXJlY3RpdmUgPSBuZXcgTGVhZmxldERpcmVjdGl2ZVdyYXBwZXIobGVhZmxldERpcmVjdGl2ZSk7XG5cdH1cblxuXHRuZ09uSW5pdCgpIHtcblxuXHRcdC8vIEluaXQgdGhlIG1hcFxuXHRcdHRoaXMubGVhZmxldERpcmVjdGl2ZS5pbml0KCk7XG5cblx0fVxuXG5cdG5nT25EZXN0cm95KCkge1xuXG5cdFx0aWYgKG51bGwgIT0gdGhpcy5sYXllcikge1xuXG5cdFx0XHQvLyBVbnJlZ2lzdGVyIHRoZSBldmVudCBoYW5kbGVyc1xuXHRcdFx0dGhpcy5yZW1vdmVMYXllckV2ZW50TGlzdGVuZXJzKHRoaXMubGF5ZXIpO1xuXG5cdFx0XHQvLyBSZW1vdmUgdGhlIGxheWVyIGZyb20gdGhlIG1hcFxuXHRcdFx0dGhpcy5sYXllci5yZW1vdmUoKTtcblx0XHR9XG5cblx0fVxuXG5cdG5nT25DaGFuZ2VzKGNoYW5nZXM6IHsgW2tleTogc3RyaW5nXTogU2ltcGxlQ2hhbmdlIH0pIHtcblxuXHRcdGlmIChjaGFuZ2VzWydsYXllciddKSB7XG5cblx0XHRcdC8vIFVwZGF0ZSB0aGUgbGF5ZXJcblx0XHRcdGNvbnN0IHA6IExheWVyID0gY2hhbmdlc1snbGF5ZXInXS5wcmV2aW91c1ZhbHVlO1xuXHRcdFx0Y29uc3QgbiA9IGNoYW5nZXNbJ2xheWVyJ10uY3VycmVudFZhbHVlO1xuXG5cdFx0XHR0aGlzLnpvbmUucnVuT3V0c2lkZUFuZ3VsYXIoKCkgPT4ge1xuXHRcdFx0XHRpZiAobnVsbCAhPSBwKSB7XG5cdFx0XHRcdFx0dGhpcy5yZW1vdmVMYXllckV2ZW50TGlzdGVuZXJzKHApO1xuXHRcdFx0XHRcdHAucmVtb3ZlKCk7XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKG51bGwgIT0gbikge1xuXHRcdFx0XHRcdHRoaXMuYWRkTGF5ZXJFdmVudExpc3RlbmVycyhuKTtcblx0XHRcdFx0XHR0aGlzLmxlYWZsZXREaXJlY3RpdmUuZ2V0TWFwKCkuYWRkTGF5ZXIobik7XG5cdFx0XHRcdH1cblx0XHRcdH0pO1xuXG5cdFx0fVxuXG5cdH1cblxuXHRwcml2YXRlIGFkZExheWVyRXZlbnRMaXN0ZW5lcnMobDogTGF5ZXIpIHtcblxuXHRcdHRoaXMub25BZGRMYXllckhhbmRsZXIgPSAoZTogTGVhZmxldEV2ZW50KSA9PiBMZWFmbGV0VXRpbC5oYW5kbGVFdmVudCh0aGlzLnpvbmUsIHRoaXMub25BZGQsIGUpO1xuXHRcdGwub24oJ2FkZCcsIHRoaXMub25BZGRMYXllckhhbmRsZXIpO1xuXG5cdFx0dGhpcy5vblJlbW92ZUxheWVySGFuZGxlciA9IChlOiBMZWFmbGV0RXZlbnQpID0+IExlYWZsZXRVdGlsLmhhbmRsZUV2ZW50KHRoaXMuem9uZSwgdGhpcy5vblJlbW92ZSwgZSk7XG5cdFx0bC5vbigncmVtb3ZlJywgdGhpcy5vblJlbW92ZUxheWVySGFuZGxlcik7XG5cblx0fVxuXG5cdHByaXZhdGUgcmVtb3ZlTGF5ZXJFdmVudExpc3RlbmVycyhsOiBMYXllcikge1xuXG5cdFx0bC5vZmYoJ2FkZCcsIHRoaXMub25BZGRMYXllckhhbmRsZXIpO1xuXHRcdGwub2ZmKCdyZW1vdmUnLCB0aGlzLm9uUmVtb3ZlTGF5ZXJIYW5kbGVyKTtcblxuXHR9XG5cbn1cbiJdfQ==