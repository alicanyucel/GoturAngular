import { Directive, EventEmitter, HostListener, Input, Output } from '@angular/core';
import { latLng, map } from 'leaflet';
import { LeafletUtil } from './leaflet.util';
import * as i0 from "@angular/core";
class LeafletDirective {
    constructor(element, zone) {
        this.element = element;
        this.zone = zone;
        this.DEFAULT_ZOOM = 1;
        this.DEFAULT_CENTER = latLng(38.907192, -77.036871);
        this.DEFAULT_FPZ_OPTIONS = {};
        this.fitBoundsOptions = this.DEFAULT_FPZ_OPTIONS;
        this.panOptions = this.DEFAULT_FPZ_OPTIONS;
        this.zoomOptions = this.DEFAULT_FPZ_OPTIONS;
        this.zoomPanOptions = this.DEFAULT_FPZ_OPTIONS;
        // Default configuration
        this.options = {};
        // Configure callback function for the map
        this.mapReady = new EventEmitter();
        this.zoomChange = new EventEmitter();
        this.centerChange = new EventEmitter();
        // Mouse Map Events
        this.onClick = new EventEmitter();
        this.onDoubleClick = new EventEmitter();
        this.onMouseDown = new EventEmitter();
        this.onMouseUp = new EventEmitter();
        this.onMouseMove = new EventEmitter();
        this.onMouseOver = new EventEmitter();
        this.onMouseOut = new EventEmitter();
        // Map Move Events
        this.onMapMove = new EventEmitter();
        this.onMapMoveStart = new EventEmitter();
        this.onMapMoveEnd = new EventEmitter();
        // Map Zoom Events
        this.onMapZoom = new EventEmitter();
        this.onMapZoomStart = new EventEmitter();
        this.onMapZoomEnd = new EventEmitter();
        // Nothing here
    }
    ngOnInit() {
        // Create the map outside of angular so the various map events don't trigger change detection
        this.zone.runOutsideAngular(() => {
            // Create the map with some reasonable defaults
            this.map = map(this.element.nativeElement, this.options);
            this.addMapEventListeners();
        });
        // Only setView if there is a center/zoom
        if (null != this.center && null != this.zoom) {
            this.setView(this.center, this.zoom);
        }
        // Set up all the initial settings
        if (null != this.fitBounds) {
            this.setFitBounds(this.fitBounds);
        }
        if (null != this.maxBounds) {
            this.setMaxBounds(this.maxBounds);
        }
        if (null != this.minZoom) {
            this.setMinZoom(this.minZoom);
        }
        if (null != this.maxZoom) {
            this.setMaxZoom(this.maxZoom);
        }
        this.doResize();
        // Fire map ready event
        this.mapReady.emit(this.map);
    }
    ngOnChanges(changes) {
        /*
         * The following code is to address an issue with our (basic) implementation of
         * zooming and panning. From our testing, it seems that a pan operation followed
         * by a zoom operation in the same thread will interfere with eachother. The zoom
         * operation interrupts/cancels the pan, resulting in a final center point that is
         * inaccurate. The solution seems to be to either separate them with a timeout or
          * to collapse them into a setView call.
         */
        // Zooming and Panning
        if (changes['zoom'] && changes['center'] && null != this.zoom && null != this.center) {
            this.setView(changes['center'].currentValue, changes['zoom'].currentValue);
        }
        // Set the zoom level
        else if (changes['zoom']) {
            this.setZoom(changes['zoom'].currentValue);
        }
        // Set the map center
        else if (changes['center']) {
            this.setCenter(changes['center'].currentValue);
        }
        // Other options
        if (changes['fitBounds']) {
            this.setFitBounds(changes['fitBounds'].currentValue);
        }
        if (changes['maxBounds']) {
            this.setMaxBounds(changes['maxBounds'].currentValue);
        }
        if (changes['minZoom']) {
            this.setMinZoom(changes['minZoom'].currentValue);
        }
        if (changes['maxZoom']) {
            this.setMaxZoom(changes['maxZoom'].currentValue);
        }
    }
    ngOnDestroy() {
        // If this directive is destroyed, the map is too
        if (null != this.map) {
            this.map.remove();
        }
    }
    getMap() {
        return this.map;
    }
    onResize() {
        this.delayResize();
    }
    addMapEventListeners() {
        const registerEventHandler = (eventName, handler) => {
            this.map.on(eventName, handler);
        };
        // Add all the pass-through mouse event handlers
        registerEventHandler('click', (e) => LeafletUtil.handleEvent(this.zone, this.onClick, e));
        registerEventHandler('dblclick', (e) => LeafletUtil.handleEvent(this.zone, this.onDoubleClick, e));
        registerEventHandler('mousedown', (e) => LeafletUtil.handleEvent(this.zone, this.onMouseDown, e));
        registerEventHandler('mouseup', (e) => LeafletUtil.handleEvent(this.zone, this.onMouseUp, e));
        registerEventHandler('mouseover', (e) => LeafletUtil.handleEvent(this.zone, this.onMouseOver, e));
        registerEventHandler('mouseout', (e) => LeafletUtil.handleEvent(this.zone, this.onMouseOut, e));
        registerEventHandler('mousemove', (e) => LeafletUtil.handleEvent(this.zone, this.onMouseMove, e));
        registerEventHandler('zoomstart', (e) => LeafletUtil.handleEvent(this.zone, this.onMapZoomStart, e));
        registerEventHandler('zoom', (e) => LeafletUtil.handleEvent(this.zone, this.onMapZoom, e));
        registerEventHandler('zoomend', (e) => LeafletUtil.handleEvent(this.zone, this.onMapZoomEnd, e));
        registerEventHandler('movestart', (e) => LeafletUtil.handleEvent(this.zone, this.onMapMoveStart, e));
        registerEventHandler('move', (e) => LeafletUtil.handleEvent(this.zone, this.onMapMove, e));
        registerEventHandler('moveend', (e) => LeafletUtil.handleEvent(this.zone, this.onMapMoveEnd, e));
        // Update any things for which we provide output bindings
        const outputUpdateHandler = () => {
            const zoom = this.map.getZoom();
            if (zoom !== this.zoom) {
                this.zoom = zoom;
                LeafletUtil.handleEvent(this.zone, this.zoomChange, zoom);
            }
            const center = this.map.getCenter();
            if (null != center || null != this.center) {
                if (((null == center || null == this.center) && center !== this.center)
                    || (center.lat !== this.center.lat || center.lng !== this.center.lng)) {
                    this.center = center;
                    LeafletUtil.handleEvent(this.zone, this.centerChange, center);
                }
            }
        };
        registerEventHandler('moveend', outputUpdateHandler);
        registerEventHandler('zoomend', outputUpdateHandler);
    }
    /**
     * Resize the map to fit it's parent container
     */
    doResize() {
        // Run this outside of angular so the map events stay outside of angular
        this.zone.runOutsideAngular(() => {
            // Invalidate the map size to trigger it to update itself
            if (null != this.map) {
                this.map.invalidateSize({});
            }
        });
    }
    /**
     * Manage a delayed resize of the component
     */
    delayResize() {
        if (null != this.resizeTimer) {
            clearTimeout(this.resizeTimer);
        }
        this.resizeTimer = setTimeout(this.doResize.bind(this), 200);
    }
    /**
     * Set the view (center/zoom) all at once
     * @param center The new center
     * @param zoom The new zoom level
     */
    setView(center, zoom) {
        if (null != this.map && null != center && null != zoom) {
            this.map.setView(center, zoom, this.zoomPanOptions);
        }
    }
    /**
     * Set the map zoom level
     * @param zoom the new zoom level for the map
     */
    setZoom(zoom) {
        if (null != this.map && null != zoom) {
            this.map.setZoom(zoom, this.zoomOptions);
        }
    }
    /**
     * Set the center of the map
     * @param center the center point
     */
    setCenter(center) {
        if (null != this.map && null != center) {
            this.map.panTo(center, this.panOptions);
        }
    }
    /**
     * Fit the map to the bounds
     * @param latLngBounds the boundary to set
     */
    setFitBounds(latLngBounds) {
        if (null != this.map && null != latLngBounds) {
            this.map.fitBounds(latLngBounds, this.fitBoundsOptions);
        }
    }
    /**
     * Set the map's max bounds
     * @param latLngBounds the boundary to set
     */
    setMaxBounds(latLngBounds) {
        if (null != this.map && null != latLngBounds) {
            this.map.setMaxBounds(latLngBounds);
        }
    }
    /**
     * Set the map's min zoom
     * @param number the new min zoom
     */
    setMinZoom(zoom) {
        if (null != this.map && null != zoom) {
            this.map.setMinZoom(zoom);
        }
    }
    /**
     * Set the map's min zoom
     * @param number the new min zoom
     */
    setMaxZoom(zoom) {
        if (null != this.map && null != zoom) {
            this.map.setMaxZoom(zoom);
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.0.1", ngImport: i0, type: LeafletDirective, deps: [{ token: i0.ElementRef }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "16.0.1", type: LeafletDirective, selector: "[leaflet]", inputs: { fitBoundsOptions: ["leafletFitBoundsOptions", "fitBoundsOptions"], panOptions: ["leafletPanOptions", "panOptions"], zoomOptions: ["leafletZoomOptions", "zoomOptions"], zoomPanOptions: ["leafletZoomPanOptions", "zoomPanOptions"], options: ["leafletOptions", "options"], zoom: ["leafletZoom", "zoom"], center: ["leafletCenter", "center"], fitBounds: ["leafletFitBounds", "fitBounds"], maxBounds: ["leafletMaxBounds", "maxBounds"], minZoom: ["leafletMinZoom", "minZoom"], maxZoom: ["leafletMaxZoom", "maxZoom"] }, outputs: { mapReady: "leafletMapReady", zoomChange: "leafletZoomChange", centerChange: "leafletCenterChange", onClick: "leafletClick", onDoubleClick: "leafletDoubleClick", onMouseDown: "leafletMouseDown", onMouseUp: "leafletMouseUp", onMouseMove: "leafletMouseMove", onMouseOver: "leafletMouseOver", onMouseOut: "leafletMouseOut", onMapMove: "leafletMapMove", onMapMoveStart: "leafletMapMoveStart", onMapMoveEnd: "leafletMapMoveEnd", onMapZoom: "leafletMapZoom", onMapZoomStart: "leafletMapZoomStart", onMapZoomEnd: "leafletMapZoomEnd" }, host: { listeners: { "window:resize": "onResize()" } }, usesOnChanges: true, ngImport: i0 }); }
}
export { LeafletDirective };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.0.1", ngImport: i0, type: LeafletDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[leaflet]'
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i0.NgZone }]; }, propDecorators: { fitBoundsOptions: [{
                type: Input,
                args: ['leafletFitBoundsOptions']
            }], panOptions: [{
                type: Input,
                args: ['leafletPanOptions']
            }], zoomOptions: [{
                type: Input,
                args: ['leafletZoomOptions']
            }], zoomPanOptions: [{
                type: Input,
                args: ['leafletZoomPanOptions']
            }], options: [{
                type: Input,
                args: ['leafletOptions']
            }], mapReady: [{
                type: Output,
                args: ['leafletMapReady']
            }], zoom: [{
                type: Input,
                args: ['leafletZoom']
            }], zoomChange: [{
                type: Output,
                args: ['leafletZoomChange']
            }], center: [{
                type: Input,
                args: ['leafletCenter']
            }], centerChange: [{
                type: Output,
                args: ['leafletCenterChange']
            }], fitBounds: [{
                type: Input,
                args: ['leafletFitBounds']
            }], maxBounds: [{
                type: Input,
                args: ['leafletMaxBounds']
            }], minZoom: [{
                type: Input,
                args: ['leafletMinZoom']
            }], maxZoom: [{
                type: Input,
                args: ['leafletMaxZoom']
            }], onClick: [{
                type: Output,
                args: ['leafletClick']
            }], onDoubleClick: [{
                type: Output,
                args: ['leafletDoubleClick']
            }], onMouseDown: [{
                type: Output,
                args: ['leafletMouseDown']
            }], onMouseUp: [{
                type: Output,
                args: ['leafletMouseUp']
            }], onMouseMove: [{
                type: Output,
                args: ['leafletMouseMove']
            }], onMouseOver: [{
                type: Output,
                args: ['leafletMouseOver']
            }], onMouseOut: [{
                type: Output,
                args: ['leafletMouseOut']
            }], onMapMove: [{
                type: Output,
                args: ['leafletMapMove']
            }], onMapMoveStart: [{
                type: Output,
                args: ['leafletMapMoveStart']
            }], onMapMoveEnd: [{
                type: Output,
                args: ['leafletMapMoveEnd']
            }], onMapZoom: [{
                type: Output,
                args: ['leafletMapZoom']
            }], onMapZoomStart: [{
                type: Output,
                args: ['leafletMapZoomStart']
            }], onMapZoomEnd: [{
                type: Output,
                args: ['leafletMapZoomEnd']
            }], onResize: [{
                type: HostListener,
                args: ['window:resize', []]
            }] } });
//# sourceMappingURL=data:application/json;base64,